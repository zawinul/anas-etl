@startuml

package  #EEEEFF {
	class Worker {
		public void run();
	}

	class DbConsumeWorker {
		public void onJob(DBJob job);
	}
	class AnasEtlWorker {
	}
	Worker <|-- DbConsumeWorker
	DbConsumeWorker <|-- AnasEtlWorker
	note bottom of DbConsumeWorker : thread che scoda i\njob e li esegue
	note right of Worker : Ã¨ un java.lang.Thread
	note right of AnasEtlWorker : scoda i job ANAS\ne li esegue

	class WorkerFactory {
		public Worker create(...);
	}
	note top of WorkerFactory : chiamato a runtime per \ngenerare nuovi thread

}


package #FFEEEE {
	class ThreadManager {}
	class ScheduleHelper {
		int getNumOfThread()
	}
	note bottom of ScheduleHelper : decide quanti thread\ncontemporaneamente attivi\nin base a orario e configurazione
	note right of ThreadManager : start e stop\ndei thread
}

WorkerFactory --> AnasEtlWorker : genera

Main --> ThreadManager : usa
Main --> WorkerFactory : genera
Main --> WebServer : usa
' WorkerFactory --> Worker : genera
AnasEtlWorker --> FileHelper : usa
AnasEtlWorker --> FileNetHelper : usa
AnasEtlWorker --> FileNetDBHelper : usa
ThreadManager --> ScheduleHelper : usa
ThreadManager --> WorkerFactory : usa
note top of Main : START!
note top of WebServer : gestisce le API REST per\n monitoraggio e conduzione
note bottom of FileHelper: scrive su disco
note bottom of FileNetHelper : legge da FileNet
note bottom of FileNetDBHelper : legge da DB FileNet

@enduml